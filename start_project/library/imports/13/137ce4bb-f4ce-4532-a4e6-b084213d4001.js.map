{"version":3,"sources":["assets\\script\\Player.js"],"names":["cc","Class","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","setJumpAction","jumpUp","moveBy","v2","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","repeatForever","sequence","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","onLoad","jumpAction","node","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","start","update","dt","Math","abs","x"],"mappings":"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","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        //主角跳跃高度\n        jumpHeight:0,\n        jumpDuration:0,\n        maxMoveSpeed:0,\n        accel:0,\n    },\n    setJumpAction:function(){\n        //上升\n        var jumpUp = cc.moveBy(this.jumpDuration,cc.v2(0,this.jumpHeight)).easing(cc.easeCubicActionOut());\n        var jumpDown = cc.moveBy(this.jumpDuration,cc.v2(0,-this.jumpHeight)).easing(cc.easeCubicActionIn());\n        \n        return cc.repeatForever(cc.sequence(jumpUp,jumpDown));\n    },\n    onKeyDown (event) {\n        // set a flag when key pressed\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = true;\n                break;\n        }\n    },\n\n    onKeyUp (event) {\n        // unset a flag when key released\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = false;\n                break;\n        }\n    },\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this); \n    },\n\n    onDestroy () {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    },\n});\n"]}