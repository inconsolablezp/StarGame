{"version":3,"sources":["assets/script/Game.js","assets/script/Player.js","assets/script/Star.js","assets/migration/use_v2.0.x_cc.Toggle_event.js"],"names":["cc","Class","extends","Component","properties","starPrefab","default","type","Prefab","maxStarDuration","minStarDuration","ground","Node","player","scoreDisplay","Label","onLoad","this","groundY","y","height","spawnNewStar","score","newStar","instantiate","node","addChild","setPosition","getNewStarPosition","getComponent","game","randX","randY","Math","random","jumpHeight","maxX","width","v2","start","update","dt","gainScore","string","jumpDuration","maxMoveSpeed","accel","setJumpAction","jumpUp","moveBy","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","repeatForever","sequence","onKeyDown","event","keyCode","macro","KEY","a","accLeft","d","accRight","onKeyUp","jumpAction","runAction","xSpeed","systemEvent","on","SystemEvent","EventType","KEY_DOWN","KEY_UP","onDestroy","off","abs","x","pickRadius","getPlayerDistance","playerPos","getPosition","dist","position","sub","mag","console","log","onPicked","destroy","Toggle","_triggerEventInScript_check"],"mappings":"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","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n     // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n\n          // score label 的引用\n        scoreDisplay: {\n        default: null,\n        type: cc.Label\n       }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height/2;\n        // 生成一个新的星星\n        this.spawnNewStar();\n\n        this.score = 0;\n\n    },\n\n    spawnNewStar: function() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n         // 在星星组件上暂存 Game 对象的引用\n         newStar.getComponent('Star').game = this;\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + Math.random() * this.player.getComponent('Player').jumpHeight +50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width/2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    start () {\n\n    },\n    update (dt) {\n  \n    },\n\n    gainScore: function () {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score;\n    },\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n        //主角跳跃高度\n        jumpHeight:0,\n        jumpDuration:0,\n        maxMoveSpeed:0,\n        accel:0,\n    },\n    setJumpAction:function(){\n        //上升\n        var jumpUp = cc.moveBy(this.jumpDuration,cc.v2(0,this.jumpHeight)).easing(cc.easeCubicActionOut());\n        var jumpDown = cc.moveBy(this.jumpDuration,cc.v2(0,-this.jumpHeight)).easing(cc.easeCubicActionIn());\n        \n        return cc.repeatForever(cc.sequence(jumpUp,jumpDown));\n    },\n    onKeyDown (event) {\n        // set a flag when key pressed\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = true;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = true;\n                break;\n        }\n    },\n\n    onKeyUp (event) {\n        // unset a flag when key released\n        switch(event.keyCode) {\n            case cc.macro.KEY.a:\n                this.accLeft = false;\n                break;\n            case cc.macro.KEY.d:\n                this.accRight = false;\n                break;\n        }\n    },\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad () {\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this); \n    },\n\n    onDestroy () {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // 限制主角的速度不能超过最大值\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    },\n});\n","// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n            //星星和主角之间距离小于这个数  就会完成收集\n            pickRadius:0,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        console.log(\"距离 = \" + dist);\n        return dist;\n    },\n\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n        \n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n         // 每帧判断和主角之间的距离是否小于收集距离\n         if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            \n            return;\n        }\n    },\n});\n","/*\n * This script is automatically generated by Cocos Creator and is only compatible with projects prior to v2.1.0.\n * You do not need to manually add this script in any other project.\n * If you don't use cc.Toggle in your project, you can delete this script directly.\n * If your project is hosted in VCS such as git, submit this script together.\n *\n * 此脚本由 Cocos Creator 自动生成，仅用于兼容 v2.1.0 之前版本的工程，\n * 你无需在任何其它项目中手动添加此脚本。\n * 如果你的项目中没用到 Toggle，可直接删除该脚本。\n * 如果你的项目有托管于 git 等版本库，请将此脚本一并上传。\n */\n\nif (cc.Toggle) {\n    // Whether the 'toggle' and 'checkEvents' events are fired when 'toggle.check() / toggle.uncheck()' is called in the code\n    // 在代码中调用 'toggle.check() / toggle.uncheck()' 时是否触发 'toggle' 与 'checkEvents' 事件\n    cc.Toggle._triggerEventInScript_check = true;\n}\n"],"file":"project.dev.js"}