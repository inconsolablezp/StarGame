{"version":3,"sources":["assets\\script\\Star.js"],"names":["cc","Class","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","node","position","sub","mag","console","log","onPicked","spawnNewStar","gainScore","destroy","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEAA,EAAE,CAACC,KAAH,CAAS;AACL,aAASD,EAAE,CAACE,SADP;AAGLC,EAAAA,UAAU,EAAE;AACJ;AACAC,IAAAA,UAAU,EAAC;AAFP,GAHP;AAQL;AAEA;AACAC,EAAAA,iBAAiB,EAAE,6BAAY;AAC3B;AACA,QAAIC,SAAS,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB,CAF2B,CAG3B;;AACA,QAAIC,IAAI,GAAG,KAAKC,IAAL,CAAUC,QAAV,CAAmBC,GAAnB,CAAuBP,SAAvB,EAAkCQ,GAAlC,EAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUN,IAAtB;AACA,WAAOA,IAAP;AACH,GAlBI;AAoBLO,EAAAA,QAAQ,EAAE,oBAAW;AACjB;AACA,SAAKV,IAAL,CAAUW,YAAV;AAEA,SAAKX,IAAL,CAAUY,SAAV,GAJiB,CAKjB;;AACA,SAAKR,IAAL,CAAUS,OAAV;AAEH,GA5BI;AA8BLC,EAAAA,KA9BK,mBA8BI,CAER,CAhCI;AAkCLC,EAAAA,MAlCK,kBAkCGC,EAlCH,EAkCO;AACP;AACA,QAAI,KAAKlB,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC7C;AACA,WAAKa,QAAL;AAEA;AACH;AACJ;AA1CI,CAAT","sourceRoot":"/","sourcesContent":["// Learn cc.Class:\n//  - https://docs.cocos.com/creator/manual/en/scripting/class.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n            //星星和主角之间距离小于这个数  就会完成收集\n            pickRadius:0,\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        console.log(\"距离 = \" + dist);\n        return dist;\n    },\n\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n        \n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n         // 每帧判断和主角之间的距离是否小于收集距离\n         if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            \n            return;\n        }\n    },\n});\n"]}